Book Store Assignment Backend Application

JSON WebToken-
JWT has user_email and user_is_admin in payload.
JWT secret key in environmental variables file.
Token will expire after 1 hour.


General Steps-
1. Authentication of JsonWebToken.
2. Validations of request body parameters for each API.
3. For each API, response body with data and message and status code in headers.


Folder Structures-
Controllers
Services
Middlewares
Models
Server.js 


Database Schema-

User-
const user_schema=  mongoose.Schema({
    name: { 
        type: String, 
        required: true,
    },
    email: { 
    	type:String,
    	required: true
    },
    password: { 
        type: String, 
        required: true
    },
    is_admin: { 
        type: Boolean, 
        required: true
    },
    dob: {
        type: Date, 
        required: true
    },
    age: { 
        type: Number,
        required: true
    },
    is_active: {
        type: Boolean,
        default: true,
        require: true
    }
})

user_schema.index({email: 1, name: 1} , {unique: true})

Book-
const book_schema = mongoose.Schema({
    
    name: {
        type: String, 
        required: true,
    },
    price: {
        type: Number, 
        required: true
    },
    published: {
        type: Date, 
        default: Date.now()
    },
    pages: {
        type: Number,
        default: 0
    },
    author: {
        type: String, 
        required: true
    },
    genre: {
        type: String, 
        required: true
    },
    age_appropriation: {
        type:Number, 
        required: true
    },
    is_discarded: {
        type: Boolean,
        default: false
    },
    copies: {
        type: Number,
        default: 1
    }
});
book_schema.index({name: 1}, {unique: true});

History-
const history_schema= mongoose.Schema({

    user_id: { 
        type: mongoose.Schema.Types.ObjectId,
        ref: "user"
    },
    book_id: { 
        type: mongoose.Schema.Types.ObjectId,
        ref: "book"
    },
    book_price: { 
        type: Number, 
        required: true
    },
    date: { 
        type: Date, 
        required: true
    },
    is_returned: { 
        type: Boolean, 
        default: false
    },
    max_date_to_return: {
        type: Date,
            default:  function(){return +new Date() + 2*7*24*60*60*1000}
    }
})

history_schema.index({user_id: 1, book_id: 1});



---------------------------------------------------------------

1. Login

API - localhost:3000/user/login
Method - POST

Request Body - 
{
	email,
	password
}

Validations - Joi - login_schema
1. Validating email for emails.
2. Validating password for at least one uppercase, one lowercase, one special character and length of password greater than 6.

User.find({user_email}) in Users database.

Response Body-
status_code:200,
{	
	data:"jwt token:jwt.sign({user},environment variable key)",
	message:"you are logged in"
}

Body if user not found.
error_code:404,
{
	data:null,
	message:"User not found"
}

---------------------------------------------------------------

2. Registration
API - localhost:3000/user/register
Method - POST

Request Body -
{
	name,
	email,
	password,
	is_admin,
	dob,
	age,
	is_active
}

Validations - Joi - registration_schema
1. Validating name for only english alphabets with its length in range of 2 to 20
2. Validating password for at least one uppercase, one lowercase, one special character and length of password greater than 6.
3. Validating email for minimum length 4, no special characters, must have '@' , domain name without special characters and domain extension only .com or .net.

Search if the user already exists or not.
Create new documents in the User collection using insertOne() method.

Response Body -
status_code:200,
{	
	data:"jwt token:jwt.sign({user},environment variable key)",
	message:"you are registered"
}

Error Body -
error_code:409,
{
	data:null,
	message:"User already exists"
}


---------------------------------------------------------------


3. Creating new book documents
API - localhost:3000/book/new
Method - POST

Request Body -
{
	jwt token,
name,
	price,
	published,
	pages,
	author,
	genre,
	age_appropriation,
	copies,
	is_discarded
}

Token Verification -
jwt.verify(request.body.token,secret key i.e. environment variable key)

Validations- Joi- new_book_schema
1. Validating copies, pages, age_appropriation and price for numbers only.
2. Validating author, genre for strings only.
3. Validating published for date only.


if verified->

if user_is_admin (from jwt payload) is true-

Use insertOne on Book collection

Response Body -
status_code:200,
{
	data:detail of few field of books added,
	message:"Books added"
}

else ->

Body if book already exists in book store.
error_code:409,
{
	data:null,
	message:"Book already exist in store"
}
Body if user_is_admin is false.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
---------------------------------------------------------------


4. Updating book copies
API - localhost:3000/book/updatecopies
Method - POST

Request Body -
{
	jwt token,
	name,
	copies,
	author
}


Token Verification -
jwt.verify(request.body.token,secret key i.e. environment variable key)

Validations - Joi-copies_update_schema
1. Validating copies for numbers only.
2. Validating author for strings only.


if verified ->

if user_is_admin (from jwt payload) is true-
Use findOneAndUpdate({name,author},{copies:req.body.copies)

Response Body -
status_code:200,
{
	data:few details of updated book fields,
	message:"Number of copies updated"
}

else ->

Body if book not found in database.
error_code:404,
{
	data:null,
	message:"Book not found"
}
Body if user_is_admin is false.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}

-----------------------------------------------------------------------------


5. Get total cost spent by the particular user in last 100 days

API - localhost:3000/history/amountspent
Method - GET

Request Body -
{
	jwt token,
	name,
	email
}


Token Verification-
jwt.verify(request.body.token,secret key i.e. environment variable key)

Validation- Joi-user_schema
1. Validating name for only english alphabets with its length in range of 2 to 20
2. Validating email for minimum length 4, no special characters, must have '@' , domain name without special characters and domain extension only .com or .net.


if verified ->

if (user_is_admin is true) OR (user_is_admin is false and user_name in request body == user_name in jwt token)-

Finding the user_id from User collection 
Use aggregate sum for the cost field in history collection where user_id matches and (Date.now()-rented date)/(60*60*24)<=100


Response Body -
status_code:200,
{	
	data: object with aggregate sum,
	message:"Amount data received successful"
}

else -
Body if user_name not found.
error_code:404,
{
	data:null,
	message:"User not found"
}
Body if the user makes a request for other user's information.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}


---------------------------------------------------------------------------------

6. Total rented book by particular user
API- localhost:3000/history/rentedbooks
Method- GET

Request Body -
{
	jwt token,
	name,
	email
}


Token Verification-
jwt.verify(request.body.token,secret key i.e. environment variable key)

Validation- Joi-user schema
1. Validating name for only english alphabets with its length in range of 2 to 20
2. Validating email for minimum length 4, no special characters, must have '@' , domain name without special characters and domain extension only .com or .net.

if verified ->

if (user_is_admin is true) OR (user_is_admin is false and user_name in request body == user_name in jwt token)-
Get user id using from user collection based on email and name.
Find all the books information from history using user id.

Response Body-
status_code:200,
{
	data:all the history of rented book as array of book objects,
	message: "Rented book information delivered"
}

else-

Body if user_name not found.
error_code:404,
{
	data:null,
	message:"User not found"
}
Body if the user is not admin and making request for other user's information.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}


---------------------------------------------------------------------------------------

7. Get total books in the store
API- localhost:3000/book/presents books
Method- GET

Request Body-
{
	jwt token
}

Token Verification-
jwt.verify(request.body.token, secret key i.e. environment variable key)

if verified->

Count the document in the book collection using the aggregate method.
Count the total rented book in history collection using aggregate methods.
Take the difference.

Response Body-
status_code:200,
{
	data: Difference,
	message:"Books in store at present"
}

else

Body if jwt not verified.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}

Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed
error_code:422,
{
	data:null,
	message:"Validation error"
}

--------------------------------------------------------------------------------

8. Get books of given genre
API- localhost:3000/book/genre
Method- GET

Request Body-
{	
	jwt token,
	genre
}

Verification-
jwt.verify(request.body.token, secret key i.e. environment variable key)

if verified->
Validations- book_genre_schema,
1.Validating genre for string without numbers and special characters.

Use find({genre}) on book genre field in book collection

Response Body -
status_code:200,
{
	data: found books' field(like name, price, age_appropriation),
	message: "All the books for particular genre"
}

else-

Body if jwt not verified.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}

---------------------------------------------------------------------------

9. Rent a book
API- localhost:3000/history/rentbook
Method- POST

Request Body-
{
	jwt token,
name
}

Token Verification-
jwt.verify(request.body.token, secret key i.e. environment variable key)

if verified->

Validations- Joi rent-book-schema


1.Check total no. of books currently rented to this user.
if less than 10 books->
	Search for the book in book collections.
	Now search in history collection for available books
	If available and same copy of book issued earlier-> 
		Reject the rent request with message
		Response body-
		status_code:200,
		{
			data:null,
			message:"No more copies available"
		}



	Else If available and no same copy of book issued earlier-> 
		Insert the document in history collection
		Response Body-
		status_code:200,
		{
			data: Book object with some of its field and issued date and max date of submission and cost,
			message:"Book issued"

		}

If greater than equal to 10->
		Response Body-
		error_code:400,
		{
			data:null,
			message:"Issued book limit reached"
		}

If not verified->
Body if jwt not verified.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}

---------------------------------------------------------------------------

10. Rent more books
API- localhost:3000/history/rentbooks
Method- POST


Request Body-
{
	jwt token,
	book_name:[
				{book1 field},
				{book2 field},
				.
				.
				.
				]
}

Token Verification->
jwt.verify(request.body.token, secret key i.e. environment variable key)

if verified->
Validations- Joi rent_books_schema

First perform search that which books are available to issue, then user insertMany to insert all the books in history and renting the books.(some checks are same as in API 9)

Response Body-
status_code:200,
{
	data:object of only those books which are successfully issued,
	message:"Books in stock issued"
}

If not verified->

Body if jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}


-----------------------------------------------------------------------------------------

11. Total rented books
API- localhost:3000/history/rentedbooks
Method- GET

Request Body -
{
	jwt token,
}

Token Verification-
jwt.verify(request.body.token,secret key i.e. environment variable key)

if verified ->

Use aggregate sum to find all the books from history that are rented.

Response Body-
status_code:200,
{
	data: total number of books that are rented,
	message: "Rented book information delivered"
}

if not verified->

Body if jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}


-----------------------------------------------------------------------

12. Get all books from given author
API- localhost:3000/book/author
Method- GET

Request Body -
{
	jwt token,
	author
}

Token Verification-
jwt.verify(request.body.token,secret key i.e. environment variable key)

if verified ->

Validations - Joi book_author_schema
1. Validating author for strings without special characters and numbers.

Search the books collection using find({author:}) method.

Response Body-
status_code:200,
{
	data:count of books of given author,
	message:"Total count retrieved successfully"
}

Body if jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validations failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}


-----------------------------------------------------------------------

13. Update the price of a book
API - localhost:3000/updateprice
Method - POST

Request Body -
{
	jwt token,
name,
	price,
	author
}



Token Verification
jwt.verify(request.body.token,secret key i.e. environment variable key)


if verified ->

Validations- Joi- price_update_schema
1. Validating price for numbers only.
2. Validating author for strings without special characters and numbers.

if user_is_admin (from jwt) is true
Use findOneAndUpdate({book_name,book_author},{price:req.body.book_price)

Response Body -
status_code:200,
{
	data:few details of updated book fields,
	message:"Book's price updated"
}

else ->

Body if book not found.
error_code:404,
{
	data:null,
	message:"Book not found"
}
Body if the user is not admin.
error_code:403,
{	
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}


-------------------------------------------------------------------------

14. Update genre of the book
API - localhost:3000/updatebookgenre
Method - POST

Request Body -
{
	jwt token,
Name,
Genre,
author
}

Token Verification-
jwt.verify(request.body.token,secret key i.e. environment variable key)

if verified ->

Validations- genre_update_schema
1. Validating author, genre for strings without special characters and numbers.

Use findOneAndUpdate({book_name,book_author},{copies:req.body.book_genre)

Response Body -
status_code:200,
{
	data:few details of updated book fields,
	message:"Book's genre updated"
}

else ->

Body if book not found.
error_code:404,
{
	data:null,
	message:"Book not found"
}
Body if user_is_admin is false or jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}


----------------------------------------------------------------------------

15. Remove a book from bookstore
API- localhost:3000/book/remove
Method- DELETE

Request Body -
{
	jwt token,
	name,
author
}

Token Verification-
jwt.verify(request.body.token,secret key i.e. environment variable key)

if verified ->

Validations- Joi- book_name_author_schema
1. Validating book_author for strings  without special characters and numbers.

If a book is rented, it cannot be removed.
If a book is not found, return 404.
If the book is found and not rented, change its is_discarded field to true.

if(successful deletion)
Response Body-
status_code:200,
{
	data:book field which is deleted,
	message:"Book deleted"
}

if(no such book found)
error_code:404,
{
	data:null,
	message:"Book not found"
}
Other error response-
Body if user_is_admin is false or jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}

----------------------------------------------------------------------

16. Remove books from the book store
API- localhost:3000/removebooks
Method- DELETE

Request Body -
{
	jwt token,
	book:[
		{book_name1,book_author1},
		{book_name2,book_author2},
		...
		],
	
}

Token Verification-
jwt.verify(request.body.token,secret key i.e. environment variable key)

if verified->

Validation
1. Validating author for strings  without special characters and numbers.

If a book is rented, it cannot be removed.
If a book is not found, return 404.
If the book is found and not rented, change its is_discarded field to true.


Response Body-
status_code:200,
{
	data:all the deleted book names,
	message:"Books removed"
}

Body if user_is_admin is false or jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}

-----------------------------------------------------------------------

17. Get the number of days after which if a book is rented, it can be rented by another customer
API- localhost:3000/book/date
Method- GET

Request Body -
{
	jwt token,
	name,
	author
}

Token Verification-
jwt.verify(request.body.token,secret key i.e. environment variable key)

Validations- Joi- book_name_author_schema
1. Validating book_author for strings  without special characters and numbers.

if verified->

Find books in the books collection and get its book id.
Count the number of copies of that book is rented currently.
If the book's copies are greater than the count of rented books, return the present date.
Else find a particular book issued in history collection using book id and then take out the earliest date to be returned.

if books are available->
Response Body-

status_code:200,
{
	data:Preset time,
	message:"Book is available to be rented"
}
if book is not available->
Find the earliest issued book in history collection that was rented.
Response Body-
status_code:200,
{
	data: difference in maximum rented date/time and current date/time (in days),
	message:"Book will be available soon"
}  
Body if book not found.
error_code:404,
{
	data:null,
	message:"Book not found"
}

if not verified->
Body if jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}


-----------------------------------------------------------------------

18. Get all the books from written by an author whose name matches a given pattern 
 - eg: smith _lastname_

API- localhost:3000/book/matchauthor
Method- GET

Request Body -
{
	jwt token,
	author
}

Token Verification
jwt.verify(request.body.token,secret key i.e. environment variable key)

Validations- Joi-book_author_schema
1. Validating book_author for strings only.

if verified->

Use find({author:/req.body.book_author/}) in mongoose that will return all documents with complete or partial match.

Response body-
status_code:200,
{	
	data: returned objects of query,
	message:`Books whose author name partially matches with {req.body.book_author}`
}


if not verified->

Body if jwt verification failed.
error_code:403,
{	
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}
