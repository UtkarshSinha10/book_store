Book Store Assignment Backend Application

Github Link - UtkarshSinha10

JSON WebToken-
JWT has user_email and user_is_admin in payload.
JWT secret key in environmental variables file.
Token will expire after 1 hour.


General Steps-
1. Authentication of JsonWebToken.
2. Validations of request body parameters for each API.
3. For each API, response body with data and message and status code in headers.


Folder Structures-
Controllers
User
Book
History
Services
User
Book
History
Middlewares
Authorization
Validation
Validation Schema
Validation Body
Validators
Models
Model Schema
User
Book
History
Model Query
User
Book
History
Server.js 


Database Schema-

User-
const user_schema=  mongoose.Schema({

    name: { 
        type: String, 
        required: true,
    },
    email: { 
    	type:String,
    	required: true
    },
    password: { 
        type: String, 
        required: true
    },
    is_admin: { 
        type: Boolean, 
        default: false
    },
    dob: {
        type: Date, 
        required: true
    },
    is_active: {
        type: Boolean,
        default: true
    }
})

user_schema.index({email: 1, name:1, is_admin: 1} , {unique: true})

Book-
const book_schema = mongoose.Schema({
    
    name: {
        type: String, 
        required: true,
    },
    price: {
        type: Number, 
        required: true
    },
    published: {
        type: Date, 
        required: true
    },
    pages: {
        type: Number,
        required: true
    },
    author: {
        type: String, 
        required: true
    },
    genre: {
        type: String, 
        required: true
    },
    age_rated: {
        type:Number, 
        required: true
    },
    is_discarded: {
        type: Boolean,
        default: false
    },
    copies: {
        type: Number,
        required: true
    }
});

book_schema.index({name: 1, author: ‘text’, genre: 1}, {unique: true});

History-
const history_schema= mongoose.Schema({

    user_id: { 
        type: mongoose.Schema.Types.ObjectId,
        ref: "users"
    },
    book_id: { 
        type: mongoose.Schema.Types.ObjectId,
        ref: "books"
    },
    book_price: { 
        type: Number, 
        required: true
    },
    rent_date: { 
        type: Date, 
        required: true
    },
    is_returned: { 
        type: Boolean, 
        default: false
    }
    returned_date:{
        type: Date,
        default: Date.now()
    }
})

history_schema.index({user_id: 1, book_id: 1, date: -1});



---------------------------------------------------------------

1. Login

API - localhost:3000/user/login
Method - POST

Request Body - 
{
	email,
	password
}

Validations - Joi - login_schema
1. Validating email for emails.
2. Validating password..

User.find({user_email}) in Users database.

Response Body-
status_code:200,
{	
	data:"jwt token:jwt.sign({user},environment variable key)",
	message:"Logged in"
}

Body if user not found.
error_code:404,
{
	data:null,
	message:"User not found"
}
Body if wrong credentials.
error_code:401,
{
	data:null,
	message:”Wrong Credentials”
}

---------------------------------------------------------------

2. Registration
API - localhost:3000/user/register
Method - POST

Request Body -
{
	name,
	email,
	password,
	dob
}

Validations - Joi - registration_schema
1. Validating name.
2. Validating password.
3. Validating email for emails.

Search if the user already exists or not.
Create new documents in the User collection using save() method.

Response Body -
status_code:200,
{	
	data:"jwt token:jwt.sign({user},environment variable key)",
	message:"you are registered"
}

Error Body -
error_code:409,
{
	data:null,
	message:"User already exists"
}


---------------------------------------------------------------


3. Creating new book documents
API - localhost:3000/book/new
Method - POST

JWT token in headers.
Request Body -
{
	name,
	price,
	published,
	pages,
	author,
	genre,
	age_rated,
	copies
}

Token Verification -
jwt.verify(token from headers,secret key i.e. environment variable key)

Validations- Joi- new_book_schema
1. Validating copies, pages, age_rated and price for numbers only.
2. Validating author, genre for strings.
3. Validating published for date only.


if verified-

if user_is_admin (from jwt payload) is true-

Use save() on Book collection

Response Body -
status_code:200,
{
	data:detail of few field of books added,
	message:"Books added"
}

else ->

Body if book already exists in book store.
error_code:409,
{
	data:null,
	message:"Book already exist in store"
}
Body if user_is_admin is false.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
---------------------------------------------------------------


4. Updating book
API - localhost:3000/book/update
Method - PUT

JWT token in headers.
Request Body -
{
	book_id,
	copies,
	genre,
	price
}


Token Verification -
jwt.verify(token from headers,secret key i.e. environment variable key)

Validations - Joi-copies_update_schema
1. Validating copies for numbers only.
2. Validating author for strings only.


if verified ->

if user_is_admin (from jwt payload) is true-

If req.body.copies != null
Use book_id to find and update book copies.
If req.body.genre != null
Use book_id to find and update book genres.
If req.body.price != null
Use book_id to find and update book price.


Response Body -
status_code:200,
{
	data:few details of updated book fields,
	message:"Number of copies updated"
}

else ->

Body if book not found in database.
error_code:404,
{
	data:null,
	message:"Book not found"
}
Body if user_is_admin is false.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}

-----------------------------------------------------------------------------


5. Get total cost spent by the particular user in last 100 days

API - localhost:3000/user/amount
Method - GET

JWT token in headers.
Request Body -
{
	email
}


Token Verification-
jwt.verify(token from headers,secret key i.e. environment variable key)

Validation- Joi-user_schema
1. Validating name for string.
2. Validating email for emails.


if verified ->

if (user_is_admin is true) OR (user_is_admin is false and email in request body == user_email in jwt token)-

Finding the user_id from User collection.
Use aggregate sum for the cost field in history collection where ( user_id matches and (Date.now()-rented date)/(60*60*24)<=100 )


Response Body -
status_code:200,
{	
	data: object with aggregate sum,
	message:"Amount data received successful"
}

else -
Body if user_name not found.
error_code:404,
{
	data:null,
	message:"User not found"
}
Body if the user makes a request for other user's information.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}


---------------------------------------------------------------------------------

6. Total rented book by particular user
API- localhost:3000/user/booksrent 
Method- GET

JWT token in headers.
Request Body -
{
	email
}

Token Verification-
jwt.verify(token from headers,secret key i.e. environment variable key)

Validation- Joi-user schema
1. Validating email for emails.
if verified ->

if (user_is_admin is true) OR (user_is_admin is false and user_name in request body == user_name in jwt token)-
Get user id using from user collection based on email and name.
Find all the books information from history using user id where is_returned field is false.

Response Body-
status_code:200,
{
	data:Rented book as array of book objects and count of books rented,
	message: "Rented book information delivered"
}

else-

Body if user_name not found.
error_code:404,
{
	data:null,
	message:"User not found"
}
Body if the user is not admin and making request for other user's information.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}


---------------------------------------------------------------------------------------

7. Get current books in the store
API- localhost:3000/book/currentbook
Method- GET

JWT token in headers.

Token Verification-
jwt.verify(token from headers, secret key i.e. environment variable key)

if verified->


Find the book_id, names and copies of all the books ( not including copies ).
For each book, using its book _id, find the number of books’ copies rented in the history database.
If rented copies < total copies of that book, add its name and book_id to the result.
Return the book count of the result and result.

Response Body-
status_code:200,
{
	Data:book count, result ,
	message:"Books in store at present"
}

else

Body if jwt not verified.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}

Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed
error_code:422,
{
	data:null,
	message:"Validation error"
}

--------------------------------------------------------------------------------

8. Get count of books of given genre
API- localhost:3000/book/genre/?genre=****&limit=***
Method- GET

JWT token in headers.

Verification-
jwt.verify(token from headers, secret key i.e. environment variable key)

if verified->

Use genre from request parameters.
Use count({genre}) on book genre fields in book collections.


Response Body -
status_code:200,
{
	data: count of books,
	message: "Books count for particular genre"
}

else-

Body if jwt not verified.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}


---------------------------------------------------------------------------

9. Rent books
API- localhost:3000/history/rentbooks
Method- POST

JWT token in headers.
Request Body-
{
	Book_name:[book_id1, book_id2,...]
}

Token Verification->
jwt.verify(token from headers, secret key i.e. environment variable key)

if verified->
Validations- Joi rent_books_schema

Count the number of books issued to the user.
If less than 10->

Get the book_id from book collections whose is_discarded field is false using book_names and rated_age is greater than equal to age of user and add them in an array. 
Now for each book_id search in the history collection for rented books, to find books available. If not available, remove that _id form the array. 
If the same user had issued the book, then also remove that _id from the array.

Loop for the array till the book issued reaches a maximum limit of 10 books.
		Insert the document in history collection

If greater than equal to 10->
		Response Body-
		error_code:400,
		{
			data:null,
			message:"Issued book limit reached"
		}

Response Body-
status_code:200,
{
	data:object of only those books which are successfully issued,
	message:"Books in stock issued"
}

If not verified->

Body if jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}


-----------------------------------------------------------------------------------------

10. Total rented books
API- localhost:3000/history/rentedbook
Method- GET

JWT token in headers.

Token Verification-
jwt.verify(token from headers,secret key i.e. environment variable key)

if verified ->

Use count to find all the books from history whose is_returned field is false.

Response Body-
status_code:200,
{
	data: total number of books that are rented,
	message: "Rented book information delivered"
}

if not verified->

Body if jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}


-----------------------------------------------------------------------

11. Get all books from given author
API- localhost:3000/book/author/:author
Method- GET

JWT token in headers.

Token Verification-
jwt.verify(token from headers,secret key i.e. environment variable key)

if verified ->

Take author name from request parameters.
Search the books collection using find() on the author name field method.
Use 20 as a maximum limit to be sent in the response body.

Response Body-
status_code:200,
{
	data:count of books and book objects,
	message:"Total count retrieved successfully"
}

Body if jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validations failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}


----------------------------------------------------------------------------


12. Remove books from the book store
API- localhost:3000/removebooks
Method- DELETE

JWT token in headers.
Request Body -
{
	book: [ book_id1, book_id2]
}

Token Verification-
jwt.verify(token from headers,secret key i.e. environment variable key)

if verified->

For each book_id, If the is_discarded is false, add their _id in an array.
Use Update many and  change its is_discarded field to true.


Response Body-
status_code:200,
{
	data: array of books whose is_discarded field is changed. 
	message:"Books removed"
}

Body if user_is_admin is false or jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}

-----------------------------------------------------------------------

13. Get the number of days after which if a book is rented, it can be rented by another customer
API- localhost:3000/book/date/book_name
Method- GET

JWT token in headers.

Token Verification-
jwt.verify(token from headers,secret key i.e. environment variable key)

if verified->

Find books in the books collection and get its book id.
Count the number of copies of that book is rented currently.
If the book's copies are greater than the count of rented books, return the present date.
Else find the book issued in history collection using book id whose is_returned field is false and sorted on the date of issue in ascending order, return the 14 - (first rent date field).

if books are available->
Response Body-

status_code:200,
{
	data:Preset time,
	message:"Book is available to be rented"
}
if book is not available->
Response Body-
status_code:200,
{
	data: difference in minimum rented date/time and current date/time (in days),
	message:"Book will be available soon"
}  
Body if book not found.
error_code:404,
{
	data:null,
	message:"Book not found"
}

if not verified->
Body if jwt verification failed.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}


-----------------------------------------------------------------------

14. Get all the books from written by an author whose name matches a given pattern
Since the Author name has Text Indexing on the book collection.

API- localhost:3000/book/match/author
Method- GET

JWT token in headers.

Token Verification
jwt.verify(token from headers,secret key i.e. environment variable key)

if verified->

Use find({$author:{$search : author from request params}}) in mongoose that will return all documents with complete or partial match.
Use pagination to limit 50 books per page.

Response body-
status_code:200,
{	
	data: book objects with name, id and author name,
	message: ’Books with partial or complete author match’
}


if not verified->

Body if jwt verification failed.
error_code:403,
{	
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}


---------------------------------------------------------------------------------

15. Return books
API- localhost:3000/history/returnbook
Method- POST

JWT token in headers.
Request Body-
{
	Book_name:[book_id1, book_id2,...]
}

Using book_id check if the book exits.
Using email in jwt find user_id.
Using user_id and book_id, update returned date to date.now() and is_returned to true.
Response Body-
{
	data: Return the name of books returned,
	message: “Book returned”
}


if not verified->

Body if jwt verification failed.
error_code:403,
{	
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}
Body if validation failed.
error_code:422,
{
	data:null,
	message:"Validation error"
}

-----------------------------------------------------------------------------------------------

16. Creating new admin
API - localhost:3000/user/newadmin
Method - PUT

JWT token in headers.
Request Body -
{
	email,
}

Token Verification -
jwt.verify(token from headers,secret key i.e. environment variable key)

Validations- 
1. Validating for emails.


if verified-

if user_is_admin (from jwt payload) is true-
Find and update the user using its email address.
If user_is_admin is false-


Response Body -
status_code:200,
{
	data: new admin name and email,
	message:"Admin created"
}


Body if user_is_admin is false.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}

----------------------------------------------------------------------------------------


17. Get all users
API - localhost:3000/user/all/?skip=1&limit=50
Method - GET

JWT token in headers.

Token Verification -
jwt.verify(token from headers,secret key i.e. environment variable key)



if verified-

if user_is_admin (from jwt payload) is true-
Return the users with name, email and user_id with a limit of 100 users.

Response Body -
status_code:200,
{
	data: return name, email, user_id,
	message:"Admin created"
}


Body if user_is_admin is false.
error_code:403,
{
	data:null,
	message:"Forbidden: Access is denied"
}
Body if jwt expired.
error_code:440,
{
	data:null,
	message:"Session expired, please login again"
}

